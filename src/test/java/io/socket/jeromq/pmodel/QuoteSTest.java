// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuoteS

package io.socket.jeromq.pmodel;

public final class QuoteSTest {
  private QuoteSTest() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface QuoteSOrBuilder extends
      // @@protoc_insertion_point(interface_extends:kafang.market.QuoteS)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *本地时间
     * </pre>
     *
     * <code>fixed64 localTime = 1;</code>
     */
    long getLocalTime();

    /**
     * <pre>
     *交易所代码
     * </pre>
     *
     * <code>int32 code = 2;</code>
     */
    int getCode();

    /**
     * <pre>
     *日期
     * </pre>
     *
     * <code>int32 date = 3;</code>
     */
    int getDate();

    /**
     * <code>fixed64 time = 4;</code>
     */
    long getTime();

    /**
     * <pre>
     * 状态 todo 后期可能改为enum
     * </pre>
     *
     * <code>int32 status = 5;</code>
     */
    int getStatus();

    /**
     * <pre>
     *成交标志
     * </pre>
     *
     * <code>string tradeFlag = 6;</code>
     */
    java.lang.String getTradeFlag();
    /**
     * <pre>
     *成交标志
     * </pre>
     *
     * <code>string tradeFlag = 6;</code>
     */
    com.google.protobuf.ByteString
        getTradeFlagBytes();

    /**
     * <pre>
     *最后一笔交易方向
     * </pre>
     *
     * <code>.Side lastTrdSide = 7;</code>
     */
    int getLastTrdSideValue();
    /**
     * <pre>
     *最后一笔交易方向
     * </pre>
     *
     * <code>.Side lastTrdSide = 7;</code>
     */
    SideTest.Side getLastTrdSide();

    /**
     * <pre>
     *当日累计成交数量(元)
     * </pre>
     *
     * <code>int64 volume = 8;</code>
     */
    long getVolume();

    /**
     * <pre>
     *当日累计成交额(元)
     * </pre>
     *
     * <code>int64 amount = 9;</code>
     */
    long getAmount();

    /**
     * <pre>
     *成交量
     * </pre>
     *
     * <code>int64 lastVlm = 10;</code>
     */
    long getLastVlm();

    /**
     * <pre>
     *成交额(元)
     * </pre>
     *
     * <code>int64 lastAmt = 11;</code>
     */
    long getLastAmt();

    /**
     * <pre>
     *成交笔数(当日累计)
     * </pre>
     *
     * <code>int32 numTrd = 12;</code>
     */
    int getNumTrd();

    /**
     * <pre>
     *开盘价
     * </pre>
     *
     * <code>float open = 13;</code>
     */
    float getOpen();

    /**
     * <pre>
     *最高价
     * </pre>
     *
     * <code>float high = 14;</code>
     */
    float getHigh();

    /**
     * <pre>
     *最低价
     * </pre>
     *
     * <code>float low = 15;</code>
     */
    float getLow();

    /**
     * <pre>
     *最新成交价
     * </pre>
     *
     * <code>float lastPx = 16;</code>
     */
    float getLastPx();

    /**
     * <pre>
     *前收盘价
     * </pre>
     *
     * <code>float preClose = 17;</code>
     */
    float getPreClose();

    /**
     * <pre>
     *10档买价
     * </pre>
     *
     * <code>repeated float bid = 18;</code>
     */
    java.util.List<java.lang.Float> getBidList();
    /**
     * <pre>
     *10档买价
     * </pre>
     *
     * <code>repeated float bid = 18;</code>
     */
    int getBidCount();
    /**
     * <pre>
     *10档买价
     * </pre>
     *
     * <code>repeated float bid = 18;</code>
     */
    float getBid(int index);

    /**
     * <pre>
     *10档卖价
     * </pre>
     *
     * <code>repeated float ask = 19;</code>
     */
    java.util.List<java.lang.Float> getAskList();
    /**
     * <pre>
     *10档卖价
     * </pre>
     *
     * <code>repeated float ask = 19;</code>
     */
    int getAskCount();
    /**
     * <pre>
     *10档卖价
     * </pre>
     *
     * <code>repeated float ask = 19;</code>
     */
    float getAsk(int index);

    /**
     * <pre>
     *10档买量
     * </pre>
     *
     * <code>repeated int64 bidSize = 20;</code>
     */
    java.util.List<java.lang.Long> getBidSizeList();
    /**
     * <pre>
     *10档买量
     * </pre>
     *
     * <code>repeated int64 bidSize = 20;</code>
     */
    int getBidSizeCount();
    /**
     * <pre>
     *10档买量
     * </pre>
     *
     * <code>repeated int64 bidSize = 20;</code>
     */
    long getBidSize(int index);

    /**
     * <pre>
     *10档卖量
     * </pre>
     *
     * <code>repeated int64 askSize = 21;</code>
     */
    java.util.List<java.lang.Long> getAskSizeList();
    /**
     * <pre>
     *10档卖量
     * </pre>
     *
     * <code>repeated int64 askSize = 21;</code>
     */
    int getAskSizeCount();
    /**
     * <pre>
     *10档卖量
     * </pre>
     *
     * <code>repeated int64 askSize = 21;</code>
     */
    long getAskSize(int index);

    /**
     * <pre>
     *委托总买量
     * </pre>
     *
     * <code>int64 bidSizeAll = 22;</code>
     */
    long getBidSizeAll();

    /**
     * <pre>
     *委托总卖量
     * </pre>
     *
     * <code>int64 askSizeAll = 23;</code>
     */
    long getAskSizeAll();

    /**
     * <pre>
     *加权平均委托买价
     * </pre>
     *
     * <code>float bidVWap = 24;</code>
     */
    float getBidVWap();

    /**
     * <pre>
     *加权平均委托卖价
     * </pre>
     *
     * <code>float askVWap = 25;</code>
     */
    float getAskVWap();

    /**
     * <pre>
     *涨停价
     * </pre>
     *
     * <code>float limitHigh = 26;</code>
     */
    float getLimitHigh();

    /**
     * <pre>
     *跌停价
     * </pre>
     *
     * <code>float limitLow = 27;</code>
     */
    float getLimitLow();
  }
  /**
   * <pre>
   *数据说明：行情快照-现货。
   *品种： 股票，场内基金。
   *交易所： 上海，深圳。
   * </pre>
   *
   * Protobuf type {@code kafang.market.QuoteS}
   */
  public  static final class QuoteS extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:kafang.market.QuoteS)
      QuoteSOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use QuoteS.newBuilder() to construct.
    private QuoteS(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private QuoteS() {
      localTime_ = 0L;
      code_ = 0;
      date_ = 0;
      time_ = 0L;
      status_ = 0;
      tradeFlag_ = "";
      lastTrdSide_ = 0;
      volume_ = 0L;
      amount_ = 0L;
      lastVlm_ = 0L;
      lastAmt_ = 0L;
      numTrd_ = 0;
      open_ = 0F;
      high_ = 0F;
      low_ = 0F;
      lastPx_ = 0F;
      preClose_ = 0F;
      bid_ = java.util.Collections.emptyList();
      ask_ = java.util.Collections.emptyList();
      bidSize_ = java.util.Collections.emptyList();
      askSize_ = java.util.Collections.emptyList();
      bidSizeAll_ = 0L;
      askSizeAll_ = 0L;
      bidVWap_ = 0F;
      askVWap_ = 0F;
      limitHigh_ = 0F;
      limitLow_ = 0F;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private QuoteS(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 9: {

              localTime_ = input.readFixed64();
              break;
            }
            case 16: {

              code_ = input.readInt32();
              break;
            }
            case 24: {

              date_ = input.readInt32();
              break;
            }
            case 33: {

              time_ = input.readFixed64();
              break;
            }
            case 40: {

              status_ = input.readInt32();
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              tradeFlag_ = s;
              break;
            }
            case 56: {
              int rawValue = input.readEnum();

              lastTrdSide_ = rawValue;
              break;
            }
            case 64: {

              volume_ = input.readInt64();
              break;
            }
            case 72: {

              amount_ = input.readInt64();
              break;
            }
            case 80: {

              lastVlm_ = input.readInt64();
              break;
            }
            case 88: {

              lastAmt_ = input.readInt64();
              break;
            }
            case 96: {

              numTrd_ = input.readInt32();
              break;
            }
            case 109: {

              open_ = input.readFloat();
              break;
            }
            case 117: {

              high_ = input.readFloat();
              break;
            }
            case 125: {

              low_ = input.readFloat();
              break;
            }
            case 133: {

              lastPx_ = input.readFloat();
              break;
            }
            case 141: {

              preClose_ = input.readFloat();
              break;
            }
            case 149: {
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
                bid_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00020000;
              }
              bid_.add(input.readFloat());
              break;
            }
            case 146: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00020000) == 0x00020000) && input.getBytesUntilLimit() > 0) {
                bid_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00020000;
              }
              while (input.getBytesUntilLimit() > 0) {
                bid_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 157: {
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
                ask_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00040000;
              }
              ask_.add(input.readFloat());
              break;
            }
            case 154: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00040000) == 0x00040000) && input.getBytesUntilLimit() > 0) {
                ask_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00040000;
              }
              while (input.getBytesUntilLimit() > 0) {
                ask_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 160: {
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
                bidSize_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00080000;
              }
              bidSize_.add(input.readInt64());
              break;
            }
            case 162: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00080000) == 0x00080000) && input.getBytesUntilLimit() > 0) {
                bidSize_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00080000;
              }
              while (input.getBytesUntilLimit() > 0) {
                bidSize_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 168: {
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
                askSize_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00100000;
              }
              askSize_.add(input.readInt64());
              break;
            }
            case 170: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00100000) == 0x00100000) && input.getBytesUntilLimit() > 0) {
                askSize_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00100000;
              }
              while (input.getBytesUntilLimit() > 0) {
                askSize_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 176: {

              bidSizeAll_ = input.readInt64();
              break;
            }
            case 184: {

              askSizeAll_ = input.readInt64();
              break;
            }
            case 197: {

              bidVWap_ = input.readFloat();
              break;
            }
            case 205: {

              askVWap_ = input.readFloat();
              break;
            }
            case 213: {

              limitHigh_ = input.readFloat();
              break;
            }
            case 221: {

              limitLow_ = input.readFloat();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00020000) == 0x00020000)) {
          bid_ = java.util.Collections.unmodifiableList(bid_);
        }
        if (((mutable_bitField0_ & 0x00040000) == 0x00040000)) {
          ask_ = java.util.Collections.unmodifiableList(ask_);
        }
        if (((mutable_bitField0_ & 0x00080000) == 0x00080000)) {
          bidSize_ = java.util.Collections.unmodifiableList(bidSize_);
        }
        if (((mutable_bitField0_ & 0x00100000) == 0x00100000)) {
          askSize_ = java.util.Collections.unmodifiableList(askSize_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return QuoteSTest.internal_static_kafang_market_QuoteS_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return QuoteSTest.internal_static_kafang_market_QuoteS_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              QuoteSTest.QuoteS.class, QuoteSTest.QuoteS.Builder.class);
    }

    private int bitField0_;
    public static final int LOCALTIME_FIELD_NUMBER = 1;
    private long localTime_;
    /**
     * <pre>
     *本地时间
     * </pre>
     *
     * <code>fixed64 localTime = 1;</code>
     */
    public long getLocalTime() {
      return localTime_;
    }

    public static final int CODE_FIELD_NUMBER = 2;
    private int code_;
    /**
     * <pre>
     *交易所代码
     * </pre>
     *
     * <code>int32 code = 2;</code>
     */
    public int getCode() {
      return code_;
    }

    public static final int DATE_FIELD_NUMBER = 3;
    private int date_;
    /**
     * <pre>
     *日期
     * </pre>
     *
     * <code>int32 date = 3;</code>
     */
    public int getDate() {
      return date_;
    }

    public static final int TIME_FIELD_NUMBER = 4;
    private long time_;
    /**
     * <code>fixed64 time = 4;</code>
     */
    public long getTime() {
      return time_;
    }

    public static final int STATUS_FIELD_NUMBER = 5;
    private int status_;
    /**
     * <pre>
     * 状态 todo 后期可能改为enum
     * </pre>
     *
     * <code>int32 status = 5;</code>
     */
    public int getStatus() {
      return status_;
    }

    public static final int TRADEFLAG_FIELD_NUMBER = 6;
    private volatile java.lang.Object tradeFlag_;
    /**
     * <pre>
     *成交标志
     * </pre>
     *
     * <code>string tradeFlag = 6;</code>
     */
    public java.lang.String getTradeFlag() {
      java.lang.Object ref = tradeFlag_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tradeFlag_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *成交标志
     * </pre>
     *
     * <code>string tradeFlag = 6;</code>
     */
    public com.google.protobuf.ByteString
        getTradeFlagBytes() {
      java.lang.Object ref = tradeFlag_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tradeFlag_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LASTTRDSIDE_FIELD_NUMBER = 7;
    private int lastTrdSide_;
    /**
     * <pre>
     *最后一笔交易方向
     * </pre>
     *
     * <code>.Side lastTrdSide = 7;</code>
     */
    public int getLastTrdSideValue() {
      return lastTrdSide_;
    }
    /**
     * <pre>
     *最后一笔交易方向
     * </pre>
     *
     * <code>.Side lastTrdSide = 7;</code>
     */
    public SideTest.Side getLastTrdSide() {
      @SuppressWarnings("deprecation")
      SideTest.Side result = SideTest.Side.valueOf(lastTrdSide_);
      return result == null ? SideTest.Side.UNRECOGNIZED : result;
    }

    public static final int VOLUME_FIELD_NUMBER = 8;
    private long volume_;
    /**
     * <pre>
     *当日累计成交数量(元)
     * </pre>
     *
     * <code>int64 volume = 8;</code>
     */
    public long getVolume() {
      return volume_;
    }

    public static final int AMOUNT_FIELD_NUMBER = 9;
    private long amount_;
    /**
     * <pre>
     *当日累计成交额(元)
     * </pre>
     *
     * <code>int64 amount = 9;</code>
     */
    public long getAmount() {
      return amount_;
    }

    public static final int LASTVLM_FIELD_NUMBER = 10;
    private long lastVlm_;
    /**
     * <pre>
     *成交量
     * </pre>
     *
     * <code>int64 lastVlm = 10;</code>
     */
    public long getLastVlm() {
      return lastVlm_;
    }

    public static final int LASTAMT_FIELD_NUMBER = 11;
    private long lastAmt_;
    /**
     * <pre>
     *成交额(元)
     * </pre>
     *
     * <code>int64 lastAmt = 11;</code>
     */
    public long getLastAmt() {
      return lastAmt_;
    }

    public static final int NUMTRD_FIELD_NUMBER = 12;
    private int numTrd_;
    /**
     * <pre>
     *成交笔数(当日累计)
     * </pre>
     *
     * <code>int32 numTrd = 12;</code>
     */
    public int getNumTrd() {
      return numTrd_;
    }

    public static final int OPEN_FIELD_NUMBER = 13;
    private float open_;
    /**
     * <pre>
     *开盘价
     * </pre>
     *
     * <code>float open = 13;</code>
     */
    public float getOpen() {
      return open_;
    }

    public static final int HIGH_FIELD_NUMBER = 14;
    private float high_;
    /**
     * <pre>
     *最高价
     * </pre>
     *
     * <code>float high = 14;</code>
     */
    public float getHigh() {
      return high_;
    }

    public static final int LOW_FIELD_NUMBER = 15;
    private float low_;
    /**
     * <pre>
     *最低价
     * </pre>
     *
     * <code>float low = 15;</code>
     */
    public float getLow() {
      return low_;
    }

    public static final int LASTPX_FIELD_NUMBER = 16;
    private float lastPx_;
    /**
     * <pre>
     *最新成交价
     * </pre>
     *
     * <code>float lastPx = 16;</code>
     */
    public float getLastPx() {
      return lastPx_;
    }

    public static final int PRECLOSE_FIELD_NUMBER = 17;
    private float preClose_;
    /**
     * <pre>
     *前收盘价
     * </pre>
     *
     * <code>float preClose = 17;</code>
     */
    public float getPreClose() {
      return preClose_;
    }

    public static final int BID_FIELD_NUMBER = 18;
    private java.util.List<java.lang.Float> bid_;
    /**
     * <pre>
     *10档买价
     * </pre>
     *
     * <code>repeated float bid = 18;</code>
     */
    public java.util.List<java.lang.Float>
        getBidList() {
      return bid_;
    }
    /**
     * <pre>
     *10档买价
     * </pre>
     *
     * <code>repeated float bid = 18;</code>
     */
    public int getBidCount() {
      return bid_.size();
    }
    /**
     * <pre>
     *10档买价
     * </pre>
     *
     * <code>repeated float bid = 18;</code>
     */
    public float getBid(int index) {
      return bid_.get(index);
    }
    private int bidMemoizedSerializedSize = -1;

    public static final int ASK_FIELD_NUMBER = 19;
    private java.util.List<java.lang.Float> ask_;
    /**
     * <pre>
     *10档卖价
     * </pre>
     *
     * <code>repeated float ask = 19;</code>
     */
    public java.util.List<java.lang.Float>
        getAskList() {
      return ask_;
    }
    /**
     * <pre>
     *10档卖价
     * </pre>
     *
     * <code>repeated float ask = 19;</code>
     */
    public int getAskCount() {
      return ask_.size();
    }
    /**
     * <pre>
     *10档卖价
     * </pre>
     *
     * <code>repeated float ask = 19;</code>
     */
    public float getAsk(int index) {
      return ask_.get(index);
    }
    private int askMemoizedSerializedSize = -1;

    public static final int BIDSIZE_FIELD_NUMBER = 20;
    private java.util.List<java.lang.Long> bidSize_;
    /**
     * <pre>
     *10档买量
     * </pre>
     *
     * <code>repeated int64 bidSize = 20;</code>
     */
    public java.util.List<java.lang.Long>
        getBidSizeList() {
      return bidSize_;
    }
    /**
     * <pre>
     *10档买量
     * </pre>
     *
     * <code>repeated int64 bidSize = 20;</code>
     */
    public int getBidSizeCount() {
      return bidSize_.size();
    }
    /**
     * <pre>
     *10档买量
     * </pre>
     *
     * <code>repeated int64 bidSize = 20;</code>
     */
    public long getBidSize(int index) {
      return bidSize_.get(index);
    }
    private int bidSizeMemoizedSerializedSize = -1;

    public static final int ASKSIZE_FIELD_NUMBER = 21;
    private java.util.List<java.lang.Long> askSize_;
    /**
     * <pre>
     *10档卖量
     * </pre>
     *
     * <code>repeated int64 askSize = 21;</code>
     */
    public java.util.List<java.lang.Long>
        getAskSizeList() {
      return askSize_;
    }
    /**
     * <pre>
     *10档卖量
     * </pre>
     *
     * <code>repeated int64 askSize = 21;</code>
     */
    public int getAskSizeCount() {
      return askSize_.size();
    }
    /**
     * <pre>
     *10档卖量
     * </pre>
     *
     * <code>repeated int64 askSize = 21;</code>
     */
    public long getAskSize(int index) {
      return askSize_.get(index);
    }
    private int askSizeMemoizedSerializedSize = -1;

    public static final int BIDSIZEALL_FIELD_NUMBER = 22;
    private long bidSizeAll_;
    /**
     * <pre>
     *委托总买量
     * </pre>
     *
     * <code>int64 bidSizeAll = 22;</code>
     */
    public long getBidSizeAll() {
      return bidSizeAll_;
    }

    public static final int ASKSIZEALL_FIELD_NUMBER = 23;
    private long askSizeAll_;
    /**
     * <pre>
     *委托总卖量
     * </pre>
     *
     * <code>int64 askSizeAll = 23;</code>
     */
    public long getAskSizeAll() {
      return askSizeAll_;
    }

    public static final int BIDVWAP_FIELD_NUMBER = 24;
    private float bidVWap_;
    /**
     * <pre>
     *加权平均委托买价
     * </pre>
     *
     * <code>float bidVWap = 24;</code>
     */
    public float getBidVWap() {
      return bidVWap_;
    }

    public static final int ASKVWAP_FIELD_NUMBER = 25;
    private float askVWap_;
    /**
     * <pre>
     *加权平均委托卖价
     * </pre>
     *
     * <code>float askVWap = 25;</code>
     */
    public float getAskVWap() {
      return askVWap_;
    }

    public static final int LIMITHIGH_FIELD_NUMBER = 26;
    private float limitHigh_;
    /**
     * <pre>
     *涨停价
     * </pre>
     *
     * <code>float limitHigh = 26;</code>
     */
    public float getLimitHigh() {
      return limitHigh_;
    }

    public static final int LIMITLOW_FIELD_NUMBER = 27;
    private float limitLow_;
    /**
     * <pre>
     *跌停价
     * </pre>
     *
     * <code>float limitLow = 27;</code>
     */
    public float getLimitLow() {
      return limitLow_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (localTime_ != 0L) {
        output.writeFixed64(1, localTime_);
      }
      if (code_ != 0) {
        output.writeInt32(2, code_);
      }
      if (date_ != 0) {
        output.writeInt32(3, date_);
      }
      if (time_ != 0L) {
        output.writeFixed64(4, time_);
      }
      if (status_ != 0) {
        output.writeInt32(5, status_);
      }
      if (!getTradeFlagBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, tradeFlag_);
      }
      if (lastTrdSide_ != SideTest.Side.UNKNOWN.getNumber()) {
        output.writeEnum(7, lastTrdSide_);
      }
      if (volume_ != 0L) {
        output.writeInt64(8, volume_);
      }
      if (amount_ != 0L) {
        output.writeInt64(9, amount_);
      }
      if (lastVlm_ != 0L) {
        output.writeInt64(10, lastVlm_);
      }
      if (lastAmt_ != 0L) {
        output.writeInt64(11, lastAmt_);
      }
      if (numTrd_ != 0) {
        output.writeInt32(12, numTrd_);
      }
      if (open_ != 0F) {
        output.writeFloat(13, open_);
      }
      if (high_ != 0F) {
        output.writeFloat(14, high_);
      }
      if (low_ != 0F) {
        output.writeFloat(15, low_);
      }
      if (lastPx_ != 0F) {
        output.writeFloat(16, lastPx_);
      }
      if (preClose_ != 0F) {
        output.writeFloat(17, preClose_);
      }
      if (getBidList().size() > 0) {
        output.writeUInt32NoTag(146);
        output.writeUInt32NoTag(bidMemoizedSerializedSize);
      }
      for (int i = 0; i < bid_.size(); i++) {
        output.writeFloatNoTag(bid_.get(i));
      }
      if (getAskList().size() > 0) {
        output.writeUInt32NoTag(154);
        output.writeUInt32NoTag(askMemoizedSerializedSize);
      }
      for (int i = 0; i < ask_.size(); i++) {
        output.writeFloatNoTag(ask_.get(i));
      }
      if (getBidSizeList().size() > 0) {
        output.writeUInt32NoTag(162);
        output.writeUInt32NoTag(bidSizeMemoizedSerializedSize);
      }
      for (int i = 0; i < bidSize_.size(); i++) {
        output.writeInt64NoTag(bidSize_.get(i));
      }
      if (getAskSizeList().size() > 0) {
        output.writeUInt32NoTag(170);
        output.writeUInt32NoTag(askSizeMemoizedSerializedSize);
      }
      for (int i = 0; i < askSize_.size(); i++) {
        output.writeInt64NoTag(askSize_.get(i));
      }
      if (bidSizeAll_ != 0L) {
        output.writeInt64(22, bidSizeAll_);
      }
      if (askSizeAll_ != 0L) {
        output.writeInt64(23, askSizeAll_);
      }
      if (bidVWap_ != 0F) {
        output.writeFloat(24, bidVWap_);
      }
      if (askVWap_ != 0F) {
        output.writeFloat(25, askVWap_);
      }
      if (limitHigh_ != 0F) {
        output.writeFloat(26, limitHigh_);
      }
      if (limitLow_ != 0F) {
        output.writeFloat(27, limitLow_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (localTime_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(1, localTime_);
      }
      if (code_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, code_);
      }
      if (date_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, date_);
      }
      if (time_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(4, time_);
      }
      if (status_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, status_);
      }
      if (!getTradeFlagBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, tradeFlag_);
      }
      if (lastTrdSide_ != SideTest.Side.UNKNOWN.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, lastTrdSide_);
      }
      if (volume_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, volume_);
      }
      if (amount_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, amount_);
      }
      if (lastVlm_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, lastVlm_);
      }
      if (lastAmt_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(11, lastAmt_);
      }
      if (numTrd_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, numTrd_);
      }
      if (open_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, open_);
      }
      if (high_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, high_);
      }
      if (low_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, low_);
      }
      if (lastPx_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(16, lastPx_);
      }
      if (preClose_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(17, preClose_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getBidList().size();
        size += dataSize;
        if (!getBidList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bidMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 4 * getAskList().size();
        size += dataSize;
        if (!getAskList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        askMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bidSize_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(bidSize_.get(i));
        }
        size += dataSize;
        if (!getBidSizeList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bidSizeMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < askSize_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(askSize_.get(i));
        }
        size += dataSize;
        if (!getAskSizeList().isEmpty()) {
          size += 2;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        askSizeMemoizedSerializedSize = dataSize;
      }
      if (bidSizeAll_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(22, bidSizeAll_);
      }
      if (askSizeAll_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(23, askSizeAll_);
      }
      if (bidVWap_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(24, bidVWap_);
      }
      if (askVWap_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(25, askVWap_);
      }
      if (limitHigh_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(26, limitHigh_);
      }
      if (limitLow_ != 0F) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(27, limitLow_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof QuoteSTest.QuoteS)) {
        return super.equals(obj);
      }
      QuoteSTest.QuoteS other = (QuoteSTest.QuoteS) obj;

      boolean result = true;
      result = result && (getLocalTime()
          == other.getLocalTime());
      result = result && (getCode()
          == other.getCode());
      result = result && (getDate()
          == other.getDate());
      result = result && (getTime()
          == other.getTime());
      result = result && (getStatus()
          == other.getStatus());
      result = result && getTradeFlag()
          .equals(other.getTradeFlag());
      result = result && lastTrdSide_ == other.lastTrdSide_;
      result = result && (getVolume()
          == other.getVolume());
      result = result && (getAmount()
          == other.getAmount());
      result = result && (getLastVlm()
          == other.getLastVlm());
      result = result && (getLastAmt()
          == other.getLastAmt());
      result = result && (getNumTrd()
          == other.getNumTrd());
      result = result && (
          java.lang.Float.floatToIntBits(getOpen())
          == java.lang.Float.floatToIntBits(
              other.getOpen()));
      result = result && (
          java.lang.Float.floatToIntBits(getHigh())
          == java.lang.Float.floatToIntBits(
              other.getHigh()));
      result = result && (
          java.lang.Float.floatToIntBits(getLow())
          == java.lang.Float.floatToIntBits(
              other.getLow()));
      result = result && (
          java.lang.Float.floatToIntBits(getLastPx())
          == java.lang.Float.floatToIntBits(
              other.getLastPx()));
      result = result && (
          java.lang.Float.floatToIntBits(getPreClose())
          == java.lang.Float.floatToIntBits(
              other.getPreClose()));
      result = result && getBidList()
          .equals(other.getBidList());
      result = result && getAskList()
          .equals(other.getAskList());
      result = result && getBidSizeList()
          .equals(other.getBidSizeList());
      result = result && getAskSizeList()
          .equals(other.getAskSizeList());
      result = result && (getBidSizeAll()
          == other.getBidSizeAll());
      result = result && (getAskSizeAll()
          == other.getAskSizeAll());
      result = result && (
          java.lang.Float.floatToIntBits(getBidVWap())
          == java.lang.Float.floatToIntBits(
              other.getBidVWap()));
      result = result && (
          java.lang.Float.floatToIntBits(getAskVWap())
          == java.lang.Float.floatToIntBits(
              other.getAskVWap()));
      result = result && (
          java.lang.Float.floatToIntBits(getLimitHigh())
          == java.lang.Float.floatToIntBits(
              other.getLimitHigh()));
      result = result && (
          java.lang.Float.floatToIntBits(getLimitLow())
          == java.lang.Float.floatToIntBits(
              other.getLimitLow()));
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + LOCALTIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLocalTime());
      hash = (37 * hash) + CODE_FIELD_NUMBER;
      hash = (53 * hash) + getCode();
      hash = (37 * hash) + DATE_FIELD_NUMBER;
      hash = (53 * hash) + getDate();
      hash = (37 * hash) + TIME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getTime());
      hash = (37 * hash) + STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getStatus();
      hash = (37 * hash) + TRADEFLAG_FIELD_NUMBER;
      hash = (53 * hash) + getTradeFlag().hashCode();
      hash = (37 * hash) + LASTTRDSIDE_FIELD_NUMBER;
      hash = (53 * hash) + lastTrdSide_;
      hash = (37 * hash) + VOLUME_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getVolume());
      hash = (37 * hash) + AMOUNT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getAmount());
      hash = (37 * hash) + LASTVLM_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLastVlm());
      hash = (37 * hash) + LASTAMT_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getLastAmt());
      hash = (37 * hash) + NUMTRD_FIELD_NUMBER;
      hash = (53 * hash) + getNumTrd();
      hash = (37 * hash) + OPEN_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getOpen());
      hash = (37 * hash) + HIGH_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getHigh());
      hash = (37 * hash) + LOW_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getLow());
      hash = (37 * hash) + LASTPX_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getLastPx());
      hash = (37 * hash) + PRECLOSE_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getPreClose());
      if (getBidCount() > 0) {
        hash = (37 * hash) + BID_FIELD_NUMBER;
        hash = (53 * hash) + getBidList().hashCode();
      }
      if (getAskCount() > 0) {
        hash = (37 * hash) + ASK_FIELD_NUMBER;
        hash = (53 * hash) + getAskList().hashCode();
      }
      if (getBidSizeCount() > 0) {
        hash = (37 * hash) + BIDSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getBidSizeList().hashCode();
      }
      if (getAskSizeCount() > 0) {
        hash = (37 * hash) + ASKSIZE_FIELD_NUMBER;
        hash = (53 * hash) + getAskSizeList().hashCode();
      }
      hash = (37 * hash) + BIDSIZEALL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getBidSizeAll());
      hash = (37 * hash) + ASKSIZEALL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getAskSizeAll());
      hash = (37 * hash) + BIDVWAP_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getBidVWap());
      hash = (37 * hash) + ASKVWAP_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getAskVWap());
      hash = (37 * hash) + LIMITHIGH_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getLimitHigh());
      hash = (37 * hash) + LIMITLOW_FIELD_NUMBER;
      hash = (53 * hash) + java.lang.Float.floatToIntBits(
          getLimitLow());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static QuoteSTest.QuoteS parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static QuoteSTest.QuoteS parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static QuoteSTest.QuoteS parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static QuoteSTest.QuoteS parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static QuoteSTest.QuoteS parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static QuoteSTest.QuoteS parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static QuoteSTest.QuoteS parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static QuoteSTest.QuoteS parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static QuoteSTest.QuoteS parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static QuoteSTest.QuoteS parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static QuoteSTest.QuoteS parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static QuoteSTest.QuoteS parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(QuoteSTest.QuoteS prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *数据说明：行情快照-现货。
     *品种： 股票，场内基金。
     *交易所： 上海，深圳。
     * </pre>
     *
     * Protobuf type {@code kafang.market.QuoteS}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:kafang.market.QuoteS)
        QuoteSTest.QuoteSOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return QuoteSTest.internal_static_kafang_market_QuoteS_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return QuoteSTest.internal_static_kafang_market_QuoteS_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                QuoteSTest.QuoteS.class, QuoteSTest.QuoteS.Builder.class);
      }

      // Construct using QuoteSTest.QuoteS.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        localTime_ = 0L;

        code_ = 0;

        date_ = 0;

        time_ = 0L;

        status_ = 0;

        tradeFlag_ = "";

        lastTrdSide_ = 0;

        volume_ = 0L;

        amount_ = 0L;

        lastVlm_ = 0L;

        lastAmt_ = 0L;

        numTrd_ = 0;

        open_ = 0F;

        high_ = 0F;

        low_ = 0F;

        lastPx_ = 0F;

        preClose_ = 0F;

        bid_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        ask_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        bidSize_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        askSize_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        bidSizeAll_ = 0L;

        askSizeAll_ = 0L;

        bidVWap_ = 0F;

        askVWap_ = 0F;

        limitHigh_ = 0F;

        limitLow_ = 0F;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return QuoteSTest.internal_static_kafang_market_QuoteS_descriptor;
      }

      @java.lang.Override
      public QuoteSTest.QuoteS getDefaultInstanceForType() {
        return QuoteSTest.QuoteS.getDefaultInstance();
      }

      @java.lang.Override
      public QuoteSTest.QuoteS build() {
        QuoteSTest.QuoteS result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public QuoteSTest.QuoteS buildPartial() {
        QuoteSTest.QuoteS result = new QuoteSTest.QuoteS(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.localTime_ = localTime_;
        result.code_ = code_;
        result.date_ = date_;
        result.time_ = time_;
        result.status_ = status_;
        result.tradeFlag_ = tradeFlag_;
        result.lastTrdSide_ = lastTrdSide_;
        result.volume_ = volume_;
        result.amount_ = amount_;
        result.lastVlm_ = lastVlm_;
        result.lastAmt_ = lastAmt_;
        result.numTrd_ = numTrd_;
        result.open_ = open_;
        result.high_ = high_;
        result.low_ = low_;
        result.lastPx_ = lastPx_;
        result.preClose_ = preClose_;
        if (((bitField0_ & 0x00020000) == 0x00020000)) {
          bid_ = java.util.Collections.unmodifiableList(bid_);
          bitField0_ = (bitField0_ & ~0x00020000);
        }
        result.bid_ = bid_;
        if (((bitField0_ & 0x00040000) == 0x00040000)) {
          ask_ = java.util.Collections.unmodifiableList(ask_);
          bitField0_ = (bitField0_ & ~0x00040000);
        }
        result.ask_ = ask_;
        if (((bitField0_ & 0x00080000) == 0x00080000)) {
          bidSize_ = java.util.Collections.unmodifiableList(bidSize_);
          bitField0_ = (bitField0_ & ~0x00080000);
        }
        result.bidSize_ = bidSize_;
        if (((bitField0_ & 0x00100000) == 0x00100000)) {
          askSize_ = java.util.Collections.unmodifiableList(askSize_);
          bitField0_ = (bitField0_ & ~0x00100000);
        }
        result.askSize_ = askSize_;
        result.bidSizeAll_ = bidSizeAll_;
        result.askSizeAll_ = askSizeAll_;
        result.bidVWap_ = bidVWap_;
        result.askVWap_ = askVWap_;
        result.limitHigh_ = limitHigh_;
        result.limitLow_ = limitLow_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof QuoteSTest.QuoteS) {
          return mergeFrom((QuoteSTest.QuoteS)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(QuoteSTest.QuoteS other) {
        if (other == QuoteSTest.QuoteS.getDefaultInstance()) return this;
        if (other.getLocalTime() != 0L) {
          setLocalTime(other.getLocalTime());
        }
        if (other.getCode() != 0) {
          setCode(other.getCode());
        }
        if (other.getDate() != 0) {
          setDate(other.getDate());
        }
        if (other.getTime() != 0L) {
          setTime(other.getTime());
        }
        if (other.getStatus() != 0) {
          setStatus(other.getStatus());
        }
        if (!other.getTradeFlag().isEmpty()) {
          tradeFlag_ = other.tradeFlag_;
          onChanged();
        }
        if (other.lastTrdSide_ != 0) {
          setLastTrdSideValue(other.getLastTrdSideValue());
        }
        if (other.getVolume() != 0L) {
          setVolume(other.getVolume());
        }
        if (other.getAmount() != 0L) {
          setAmount(other.getAmount());
        }
        if (other.getLastVlm() != 0L) {
          setLastVlm(other.getLastVlm());
        }
        if (other.getLastAmt() != 0L) {
          setLastAmt(other.getLastAmt());
        }
        if (other.getNumTrd() != 0) {
          setNumTrd(other.getNumTrd());
        }
        if (other.getOpen() != 0F) {
          setOpen(other.getOpen());
        }
        if (other.getHigh() != 0F) {
          setHigh(other.getHigh());
        }
        if (other.getLow() != 0F) {
          setLow(other.getLow());
        }
        if (other.getLastPx() != 0F) {
          setLastPx(other.getLastPx());
        }
        if (other.getPreClose() != 0F) {
          setPreClose(other.getPreClose());
        }
        if (!other.bid_.isEmpty()) {
          if (bid_.isEmpty()) {
            bid_ = other.bid_;
            bitField0_ = (bitField0_ & ~0x00020000);
          } else {
            ensureBidIsMutable();
            bid_.addAll(other.bid_);
          }
          onChanged();
        }
        if (!other.ask_.isEmpty()) {
          if (ask_.isEmpty()) {
            ask_ = other.ask_;
            bitField0_ = (bitField0_ & ~0x00040000);
          } else {
            ensureAskIsMutable();
            ask_.addAll(other.ask_);
          }
          onChanged();
        }
        if (!other.bidSize_.isEmpty()) {
          if (bidSize_.isEmpty()) {
            bidSize_ = other.bidSize_;
            bitField0_ = (bitField0_ & ~0x00080000);
          } else {
            ensureBidSizeIsMutable();
            bidSize_.addAll(other.bidSize_);
          }
          onChanged();
        }
        if (!other.askSize_.isEmpty()) {
          if (askSize_.isEmpty()) {
            askSize_ = other.askSize_;
            bitField0_ = (bitField0_ & ~0x00100000);
          } else {
            ensureAskSizeIsMutable();
            askSize_.addAll(other.askSize_);
          }
          onChanged();
        }
        if (other.getBidSizeAll() != 0L) {
          setBidSizeAll(other.getBidSizeAll());
        }
        if (other.getAskSizeAll() != 0L) {
          setAskSizeAll(other.getAskSizeAll());
        }
        if (other.getBidVWap() != 0F) {
          setBidVWap(other.getBidVWap());
        }
        if (other.getAskVWap() != 0F) {
          setAskVWap(other.getAskVWap());
        }
        if (other.getLimitHigh() != 0F) {
          setLimitHigh(other.getLimitHigh());
        }
        if (other.getLimitLow() != 0F) {
          setLimitLow(other.getLimitLow());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        QuoteSTest.QuoteS parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (QuoteSTest.QuoteS) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long localTime_ ;
      /**
       * <pre>
       *本地时间
       * </pre>
       *
       * <code>fixed64 localTime = 1;</code>
       */
      public long getLocalTime() {
        return localTime_;
      }
      /**
       * <pre>
       *本地时间
       * </pre>
       *
       * <code>fixed64 localTime = 1;</code>
       */
      public Builder setLocalTime(long value) {
        
        localTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *本地时间
       * </pre>
       *
       * <code>fixed64 localTime = 1;</code>
       */
      public Builder clearLocalTime() {
        
        localTime_ = 0L;
        onChanged();
        return this;
      }

      private int code_ ;
      /**
       * <pre>
       *交易所代码
       * </pre>
       *
       * <code>int32 code = 2;</code>
       */
      public int getCode() {
        return code_;
      }
      /**
       * <pre>
       *交易所代码
       * </pre>
       *
       * <code>int32 code = 2;</code>
       */
      public Builder setCode(int value) {
        
        code_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *交易所代码
       * </pre>
       *
       * <code>int32 code = 2;</code>
       */
      public Builder clearCode() {
        
        code_ = 0;
        onChanged();
        return this;
      }

      private int date_ ;
      /**
       * <pre>
       *日期
       * </pre>
       *
       * <code>int32 date = 3;</code>
       */
      public int getDate() {
        return date_;
      }
      /**
       * <pre>
       *日期
       * </pre>
       *
       * <code>int32 date = 3;</code>
       */
      public Builder setDate(int value) {
        
        date_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *日期
       * </pre>
       *
       * <code>int32 date = 3;</code>
       */
      public Builder clearDate() {
        
        date_ = 0;
        onChanged();
        return this;
      }

      private long time_ ;
      /**
       * <code>fixed64 time = 4;</code>
       */
      public long getTime() {
        return time_;
      }
      /**
       * <code>fixed64 time = 4;</code>
       */
      public Builder setTime(long value) {
        
        time_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>fixed64 time = 4;</code>
       */
      public Builder clearTime() {
        
        time_ = 0L;
        onChanged();
        return this;
      }

      private int status_ ;
      /**
       * <pre>
       * 状态 todo 后期可能改为enum
       * </pre>
       *
       * <code>int32 status = 5;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <pre>
       * 状态 todo 后期可能改为enum
       * </pre>
       *
       * <code>int32 status = 5;</code>
       */
      public Builder setStatus(int value) {
        
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * 状态 todo 后期可能改为enum
       * </pre>
       *
       * <code>int32 status = 5;</code>
       */
      public Builder clearStatus() {
        
        status_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object tradeFlag_ = "";
      /**
       * <pre>
       *成交标志
       * </pre>
       *
       * <code>string tradeFlag = 6;</code>
       */
      public java.lang.String getTradeFlag() {
        java.lang.Object ref = tradeFlag_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tradeFlag_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *成交标志
       * </pre>
       *
       * <code>string tradeFlag = 6;</code>
       */
      public com.google.protobuf.ByteString
          getTradeFlagBytes() {
        java.lang.Object ref = tradeFlag_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tradeFlag_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *成交标志
       * </pre>
       *
       * <code>string tradeFlag = 6;</code>
       */
      public Builder setTradeFlag(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tradeFlag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *成交标志
       * </pre>
       *
       * <code>string tradeFlag = 6;</code>
       */
      public Builder clearTradeFlag() {
        
        tradeFlag_ = getDefaultInstance().getTradeFlag();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *成交标志
       * </pre>
       *
       * <code>string tradeFlag = 6;</code>
       */
      public Builder setTradeFlagBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tradeFlag_ = value;
        onChanged();
        return this;
      }

      private int lastTrdSide_ = 0;
      /**
       * <pre>
       *最后一笔交易方向
       * </pre>
       *
       * <code>.Side lastTrdSide = 7;</code>
       */
      public int getLastTrdSideValue() {
        return lastTrdSide_;
      }
      /**
       * <pre>
       *最后一笔交易方向
       * </pre>
       *
       * <code>.Side lastTrdSide = 7;</code>
       */
      public Builder setLastTrdSideValue(int value) {
        lastTrdSide_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *最后一笔交易方向
       * </pre>
       *
       * <code>.Side lastTrdSide = 7;</code>
       */
      public SideTest.Side getLastTrdSide() {
        @SuppressWarnings("deprecation")
        SideTest.Side result = SideTest.Side.valueOf(lastTrdSide_);
        return result == null ? SideTest.Side.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       *最后一笔交易方向
       * </pre>
       *
       * <code>.Side lastTrdSide = 7;</code>
       */
      public Builder setLastTrdSide(SideTest.Side value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        lastTrdSide_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *最后一笔交易方向
       * </pre>
       *
       * <code>.Side lastTrdSide = 7;</code>
       */
      public Builder clearLastTrdSide() {
        
        lastTrdSide_ = 0;
        onChanged();
        return this;
      }

      private long volume_ ;
      /**
       * <pre>
       *当日累计成交数量(元)
       * </pre>
       *
       * <code>int64 volume = 8;</code>
       */
      public long getVolume() {
        return volume_;
      }
      /**
       * <pre>
       *当日累计成交数量(元)
       * </pre>
       *
       * <code>int64 volume = 8;</code>
       */
      public Builder setVolume(long value) {
        
        volume_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *当日累计成交数量(元)
       * </pre>
       *
       * <code>int64 volume = 8;</code>
       */
      public Builder clearVolume() {
        
        volume_ = 0L;
        onChanged();
        return this;
      }

      private long amount_ ;
      /**
       * <pre>
       *当日累计成交额(元)
       * </pre>
       *
       * <code>int64 amount = 9;</code>
       */
      public long getAmount() {
        return amount_;
      }
      /**
       * <pre>
       *当日累计成交额(元)
       * </pre>
       *
       * <code>int64 amount = 9;</code>
       */
      public Builder setAmount(long value) {
        
        amount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *当日累计成交额(元)
       * </pre>
       *
       * <code>int64 amount = 9;</code>
       */
      public Builder clearAmount() {
        
        amount_ = 0L;
        onChanged();
        return this;
      }

      private long lastVlm_ ;
      /**
       * <pre>
       *成交量
       * </pre>
       *
       * <code>int64 lastVlm = 10;</code>
       */
      public long getLastVlm() {
        return lastVlm_;
      }
      /**
       * <pre>
       *成交量
       * </pre>
       *
       * <code>int64 lastVlm = 10;</code>
       */
      public Builder setLastVlm(long value) {
        
        lastVlm_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *成交量
       * </pre>
       *
       * <code>int64 lastVlm = 10;</code>
       */
      public Builder clearLastVlm() {
        
        lastVlm_ = 0L;
        onChanged();
        return this;
      }

      private long lastAmt_ ;
      /**
       * <pre>
       *成交额(元)
       * </pre>
       *
       * <code>int64 lastAmt = 11;</code>
       */
      public long getLastAmt() {
        return lastAmt_;
      }
      /**
       * <pre>
       *成交额(元)
       * </pre>
       *
       * <code>int64 lastAmt = 11;</code>
       */
      public Builder setLastAmt(long value) {
        
        lastAmt_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *成交额(元)
       * </pre>
       *
       * <code>int64 lastAmt = 11;</code>
       */
      public Builder clearLastAmt() {
        
        lastAmt_ = 0L;
        onChanged();
        return this;
      }

      private int numTrd_ ;
      /**
       * <pre>
       *成交笔数(当日累计)
       * </pre>
       *
       * <code>int32 numTrd = 12;</code>
       */
      public int getNumTrd() {
        return numTrd_;
      }
      /**
       * <pre>
       *成交笔数(当日累计)
       * </pre>
       *
       * <code>int32 numTrd = 12;</code>
       */
      public Builder setNumTrd(int value) {
        
        numTrd_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *成交笔数(当日累计)
       * </pre>
       *
       * <code>int32 numTrd = 12;</code>
       */
      public Builder clearNumTrd() {
        
        numTrd_ = 0;
        onChanged();
        return this;
      }

      private float open_ ;
      /**
       * <pre>
       *开盘价
       * </pre>
       *
       * <code>float open = 13;</code>
       */
      public float getOpen() {
        return open_;
      }
      /**
       * <pre>
       *开盘价
       * </pre>
       *
       * <code>float open = 13;</code>
       */
      public Builder setOpen(float value) {
        
        open_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *开盘价
       * </pre>
       *
       * <code>float open = 13;</code>
       */
      public Builder clearOpen() {
        
        open_ = 0F;
        onChanged();
        return this;
      }

      private float high_ ;
      /**
       * <pre>
       *最高价
       * </pre>
       *
       * <code>float high = 14;</code>
       */
      public float getHigh() {
        return high_;
      }
      /**
       * <pre>
       *最高价
       * </pre>
       *
       * <code>float high = 14;</code>
       */
      public Builder setHigh(float value) {
        
        high_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *最高价
       * </pre>
       *
       * <code>float high = 14;</code>
       */
      public Builder clearHigh() {
        
        high_ = 0F;
        onChanged();
        return this;
      }

      private float low_ ;
      /**
       * <pre>
       *最低价
       * </pre>
       *
       * <code>float low = 15;</code>
       */
      public float getLow() {
        return low_;
      }
      /**
       * <pre>
       *最低价
       * </pre>
       *
       * <code>float low = 15;</code>
       */
      public Builder setLow(float value) {
        
        low_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *最低价
       * </pre>
       *
       * <code>float low = 15;</code>
       */
      public Builder clearLow() {
        
        low_ = 0F;
        onChanged();
        return this;
      }

      private float lastPx_ ;
      /**
       * <pre>
       *最新成交价
       * </pre>
       *
       * <code>float lastPx = 16;</code>
       */
      public float getLastPx() {
        return lastPx_;
      }
      /**
       * <pre>
       *最新成交价
       * </pre>
       *
       * <code>float lastPx = 16;</code>
       */
      public Builder setLastPx(float value) {
        
        lastPx_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *最新成交价
       * </pre>
       *
       * <code>float lastPx = 16;</code>
       */
      public Builder clearLastPx() {
        
        lastPx_ = 0F;
        onChanged();
        return this;
      }

      private float preClose_ ;
      /**
       * <pre>
       *前收盘价
       * </pre>
       *
       * <code>float preClose = 17;</code>
       */
      public float getPreClose() {
        return preClose_;
      }
      /**
       * <pre>
       *前收盘价
       * </pre>
       *
       * <code>float preClose = 17;</code>
       */
      public Builder setPreClose(float value) {
        
        preClose_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *前收盘价
       * </pre>
       *
       * <code>float preClose = 17;</code>
       */
      public Builder clearPreClose() {
        
        preClose_ = 0F;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> bid_ = java.util.Collections.emptyList();
      private void ensureBidIsMutable() {
        if (!((bitField0_ & 0x00020000) == 0x00020000)) {
          bid_ = new java.util.ArrayList<java.lang.Float>(bid_);
          bitField0_ |= 0x00020000;
         }
      }
      /**
       * <pre>
       *10档买价
       * </pre>
       *
       * <code>repeated float bid = 18;</code>
       */
      public java.util.List<java.lang.Float>
          getBidList() {
        return java.util.Collections.unmodifiableList(bid_);
      }
      /**
       * <pre>
       *10档买价
       * </pre>
       *
       * <code>repeated float bid = 18;</code>
       */
      public int getBidCount() {
        return bid_.size();
      }
      /**
       * <pre>
       *10档买价
       * </pre>
       *
       * <code>repeated float bid = 18;</code>
       */
      public float getBid(int index) {
        return bid_.get(index);
      }
      /**
       * <pre>
       *10档买价
       * </pre>
       *
       * <code>repeated float bid = 18;</code>
       */
      public Builder setBid(
          int index, float value) {
        ensureBidIsMutable();
        bid_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档买价
       * </pre>
       *
       * <code>repeated float bid = 18;</code>
       */
      public Builder addBid(float value) {
        ensureBidIsMutable();
        bid_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档买价
       * </pre>
       *
       * <code>repeated float bid = 18;</code>
       */
      public Builder addAllBid(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureBidIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bid_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档买价
       * </pre>
       *
       * <code>repeated float bid = 18;</code>
       */
      public Builder clearBid() {
        bid_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00020000);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> ask_ = java.util.Collections.emptyList();
      private void ensureAskIsMutable() {
        if (!((bitField0_ & 0x00040000) == 0x00040000)) {
          ask_ = new java.util.ArrayList<java.lang.Float>(ask_);
          bitField0_ |= 0x00040000;
         }
      }
      /**
       * <pre>
       *10档卖价
       * </pre>
       *
       * <code>repeated float ask = 19;</code>
       */
      public java.util.List<java.lang.Float>
          getAskList() {
        return java.util.Collections.unmodifiableList(ask_);
      }
      /**
       * <pre>
       *10档卖价
       * </pre>
       *
       * <code>repeated float ask = 19;</code>
       */
      public int getAskCount() {
        return ask_.size();
      }
      /**
       * <pre>
       *10档卖价
       * </pre>
       *
       * <code>repeated float ask = 19;</code>
       */
      public float getAsk(int index) {
        return ask_.get(index);
      }
      /**
       * <pre>
       *10档卖价
       * </pre>
       *
       * <code>repeated float ask = 19;</code>
       */
      public Builder setAsk(
          int index, float value) {
        ensureAskIsMutable();
        ask_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档卖价
       * </pre>
       *
       * <code>repeated float ask = 19;</code>
       */
      public Builder addAsk(float value) {
        ensureAskIsMutable();
        ask_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档卖价
       * </pre>
       *
       * <code>repeated float ask = 19;</code>
       */
      public Builder addAllAsk(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureAskIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ask_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档卖价
       * </pre>
       *
       * <code>repeated float ask = 19;</code>
       */
      public Builder clearAsk() {
        ask_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00040000);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> bidSize_ = java.util.Collections.emptyList();
      private void ensureBidSizeIsMutable() {
        if (!((bitField0_ & 0x00080000) == 0x00080000)) {
          bidSize_ = new java.util.ArrayList<java.lang.Long>(bidSize_);
          bitField0_ |= 0x00080000;
         }
      }
      /**
       * <pre>
       *10档买量
       * </pre>
       *
       * <code>repeated int64 bidSize = 20;</code>
       */
      public java.util.List<java.lang.Long>
          getBidSizeList() {
        return java.util.Collections.unmodifiableList(bidSize_);
      }
      /**
       * <pre>
       *10档买量
       * </pre>
       *
       * <code>repeated int64 bidSize = 20;</code>
       */
      public int getBidSizeCount() {
        return bidSize_.size();
      }
      /**
       * <pre>
       *10档买量
       * </pre>
       *
       * <code>repeated int64 bidSize = 20;</code>
       */
      public long getBidSize(int index) {
        return bidSize_.get(index);
      }
      /**
       * <pre>
       *10档买量
       * </pre>
       *
       * <code>repeated int64 bidSize = 20;</code>
       */
      public Builder setBidSize(
          int index, long value) {
        ensureBidSizeIsMutable();
        bidSize_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档买量
       * </pre>
       *
       * <code>repeated int64 bidSize = 20;</code>
       */
      public Builder addBidSize(long value) {
        ensureBidSizeIsMutable();
        bidSize_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档买量
       * </pre>
       *
       * <code>repeated int64 bidSize = 20;</code>
       */
      public Builder addAllBidSize(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureBidSizeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bidSize_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档买量
       * </pre>
       *
       * <code>repeated int64 bidSize = 20;</code>
       */
      public Builder clearBidSize() {
        bidSize_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00080000);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> askSize_ = java.util.Collections.emptyList();
      private void ensureAskSizeIsMutable() {
        if (!((bitField0_ & 0x00100000) == 0x00100000)) {
          askSize_ = new java.util.ArrayList<java.lang.Long>(askSize_);
          bitField0_ |= 0x00100000;
         }
      }
      /**
       * <pre>
       *10档卖量
       * </pre>
       *
       * <code>repeated int64 askSize = 21;</code>
       */
      public java.util.List<java.lang.Long>
          getAskSizeList() {
        return java.util.Collections.unmodifiableList(askSize_);
      }
      /**
       * <pre>
       *10档卖量
       * </pre>
       *
       * <code>repeated int64 askSize = 21;</code>
       */
      public int getAskSizeCount() {
        return askSize_.size();
      }
      /**
       * <pre>
       *10档卖量
       * </pre>
       *
       * <code>repeated int64 askSize = 21;</code>
       */
      public long getAskSize(int index) {
        return askSize_.get(index);
      }
      /**
       * <pre>
       *10档卖量
       * </pre>
       *
       * <code>repeated int64 askSize = 21;</code>
       */
      public Builder setAskSize(
          int index, long value) {
        ensureAskSizeIsMutable();
        askSize_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档卖量
       * </pre>
       *
       * <code>repeated int64 askSize = 21;</code>
       */
      public Builder addAskSize(long value) {
        ensureAskSizeIsMutable();
        askSize_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档卖量
       * </pre>
       *
       * <code>repeated int64 askSize = 21;</code>
       */
      public Builder addAllAskSize(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureAskSizeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, askSize_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *10档卖量
       * </pre>
       *
       * <code>repeated int64 askSize = 21;</code>
       */
      public Builder clearAskSize() {
        askSize_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00100000);
        onChanged();
        return this;
      }

      private long bidSizeAll_ ;
      /**
       * <pre>
       *委托总买量
       * </pre>
       *
       * <code>int64 bidSizeAll = 22;</code>
       */
      public long getBidSizeAll() {
        return bidSizeAll_;
      }
      /**
       * <pre>
       *委托总买量
       * </pre>
       *
       * <code>int64 bidSizeAll = 22;</code>
       */
      public Builder setBidSizeAll(long value) {
        
        bidSizeAll_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *委托总买量
       * </pre>
       *
       * <code>int64 bidSizeAll = 22;</code>
       */
      public Builder clearBidSizeAll() {
        
        bidSizeAll_ = 0L;
        onChanged();
        return this;
      }

      private long askSizeAll_ ;
      /**
       * <pre>
       *委托总卖量
       * </pre>
       *
       * <code>int64 askSizeAll = 23;</code>
       */
      public long getAskSizeAll() {
        return askSizeAll_;
      }
      /**
       * <pre>
       *委托总卖量
       * </pre>
       *
       * <code>int64 askSizeAll = 23;</code>
       */
      public Builder setAskSizeAll(long value) {
        
        askSizeAll_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *委托总卖量
       * </pre>
       *
       * <code>int64 askSizeAll = 23;</code>
       */
      public Builder clearAskSizeAll() {
        
        askSizeAll_ = 0L;
        onChanged();
        return this;
      }

      private float bidVWap_ ;
      /**
       * <pre>
       *加权平均委托买价
       * </pre>
       *
       * <code>float bidVWap = 24;</code>
       */
      public float getBidVWap() {
        return bidVWap_;
      }
      /**
       * <pre>
       *加权平均委托买价
       * </pre>
       *
       * <code>float bidVWap = 24;</code>
       */
      public Builder setBidVWap(float value) {
        
        bidVWap_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *加权平均委托买价
       * </pre>
       *
       * <code>float bidVWap = 24;</code>
       */
      public Builder clearBidVWap() {
        
        bidVWap_ = 0F;
        onChanged();
        return this;
      }

      private float askVWap_ ;
      /**
       * <pre>
       *加权平均委托卖价
       * </pre>
       *
       * <code>float askVWap = 25;</code>
       */
      public float getAskVWap() {
        return askVWap_;
      }
      /**
       * <pre>
       *加权平均委托卖价
       * </pre>
       *
       * <code>float askVWap = 25;</code>
       */
      public Builder setAskVWap(float value) {
        
        askVWap_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *加权平均委托卖价
       * </pre>
       *
       * <code>float askVWap = 25;</code>
       */
      public Builder clearAskVWap() {
        
        askVWap_ = 0F;
        onChanged();
        return this;
      }

      private float limitHigh_ ;
      /**
       * <pre>
       *涨停价
       * </pre>
       *
       * <code>float limitHigh = 26;</code>
       */
      public float getLimitHigh() {
        return limitHigh_;
      }
      /**
       * <pre>
       *涨停价
       * </pre>
       *
       * <code>float limitHigh = 26;</code>
       */
      public Builder setLimitHigh(float value) {
        
        limitHigh_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *涨停价
       * </pre>
       *
       * <code>float limitHigh = 26;</code>
       */
      public Builder clearLimitHigh() {
        
        limitHigh_ = 0F;
        onChanged();
        return this;
      }

      private float limitLow_ ;
      /**
       * <pre>
       *跌停价
       * </pre>
       *
       * <code>float limitLow = 27;</code>
       */
      public float getLimitLow() {
        return limitLow_;
      }
      /**
       * <pre>
       *跌停价
       * </pre>
       *
       * <code>float limitLow = 27;</code>
       */
      public Builder setLimitLow(float value) {
        
        limitLow_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *跌停价
       * </pre>
       *
       * <code>float limitLow = 27;</code>
       */
      public Builder clearLimitLow() {
        
        limitLow_ = 0F;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:kafang.market.QuoteS)
    }

    // @@protoc_insertion_point(class_scope:kafang.market.QuoteS)
    private static final QuoteSTest.QuoteS DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new QuoteSTest.QuoteS();
    }

    public static QuoteSTest.QuoteS getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<QuoteS>
        PARSER = new com.google.protobuf.AbstractParser<QuoteS>() {
      @java.lang.Override
      public QuoteS parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new QuoteS(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<QuoteS> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<QuoteS> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public QuoteSTest.QuoteS getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_kafang_market_QuoteS_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_kafang_market_QuoteS_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\006QuoteS\022\rkafang.market\032\004Side\"\314\003\n\006QuoteS" +
      "\022\021\n\tlocalTime\030\001 \001(\006\022\014\n\004code\030\002 \001(\005\022\014\n\004dat" +
      "e\030\003 \001(\005\022\014\n\004time\030\004 \001(\006\022\016\n\006status\030\005 \001(\005\022\021\n" +
      "\ttradeFlag\030\006 \001(\t\022\032\n\013lastTrdSide\030\007 \001(\0162\005." +
      "Side\022\016\n\006volume\030\010 \001(\003\022\016\n\006amount\030\t \001(\003\022\017\n\007" +
      "lastVlm\030\n \001(\003\022\017\n\007lastAmt\030\013 \001(\003\022\016\n\006numTrd" +
      "\030\014 \001(\005\022\014\n\004open\030\r \001(\002\022\014\n\004high\030\016 \001(\002\022\013\n\003lo" +
      "w\030\017 \001(\002\022\016\n\006lastPx\030\020 \001(\002\022\020\n\010preClose\030\021 \001(" +
      "\002\022\013\n\003bid\030\022 \003(\002\022\013\n\003ask\030\023 \003(\002\022\017\n\007bidSize\030\024" +
      " \003(\003\022\017\n\007askSize\030\025 \003(\003\022\022\n\nbidSizeAll\030\026 \001(" +
      "\003\022\022\n\naskSizeAll\030\027 \001(\003\022\017\n\007bidVWap\030\030 \001(\002\022\017" +
      "\n\007askVWap\030\031 \001(\002\022\021\n\tlimitHigh\030\032 \001(\002\022\020\n\010li" +
      "mitLow\030\033 \001(\002B+\n\035com.kafang.jeromq.core.p" +
      "modelB\nQuoteSTestb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          SideTest.getDescriptor(),
        }, assigner);
    internal_static_kafang_market_QuoteS_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_kafang_market_QuoteS_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_kafang_market_QuoteS_descriptor,
        new java.lang.String[] { "LocalTime", "Code", "Date", "Time", "Status", "TradeFlag", "LastTrdSide", "Volume", "Amount", "LastVlm", "LastAmt", "NumTrd", "Open", "High", "Low", "LastPx", "PreClose", "Bid", "Ask", "BidSize", "AskSize", "BidSizeAll", "AskSizeAll", "BidVWap", "AskVWap", "LimitHigh", "LimitLow", });
    SideTest.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
